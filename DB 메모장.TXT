기본 명령어

--      : 한 줄 주석
/* */   : 여러 줄 주석

SELECT : 조회
지정된 테이블에서 원하는 데이터를 선택해서 조회하는 SQL\

조회된 결과 행의 집합 == RESULT SET(결과 집합)

RESULT SET은 0행 이상 포함될 수 있다
--> 조건에 맞는 행이 없을 수도 있어서


[SELECT 작성법 1]
SELECT 컬럼, 컬럼, ...
FROM 테이블;

-> 테이블 모든 행에서 컬럼명이 일치하는 컬럼값 조회

모든행, 모든 컬럼 조회 : * ASTERISK 이용함
-> 
SELECT * FROM 테이블;

[컬럼 값 산술 연산]
컬럼 값 : 행과 열이 교차되는 테이블의 한 칸에 작성된 값

SELECT문 작성 시 컬럼명에 산술 연산을 직접 작성하면 
조회 결과에 연산 결과가 반영되어 조회된다!
    SELECT SALARY, SALARY + 1000000
    FROM EMPLOYEE

    -> SALARY 값과 + 100만 계산된 값 함께 조회됨
    -> SALARY에 100만이 더해진 결과가 반영되는 것이 아닌
       SALARY + 1000000 컬럼 하나 생성되는 것!

[시간 표현하기]
- SYSDATE
    - 현재시간 조회
    - 연 월 일 시 분 초
- SYSTIMESTAMP
    - 현재시간 조회
    - 연 월 일 시 분 초 밀리초 + 지역(한국: + 9:00)
- TO_DATE('문자열', '패턴') : '문자열'을 '패턴 형태로 해석해서 DATE 타입으로 변경'
- TO_DATE('2024-01-01', 'YYYY-MM-DD') --""아닌 '' 사용!

숫자 올림처리
CEIL(숫자) -> 괄호 안의 숫자 정수단위 올림처리
괄호 안에 TO_DATE 사용 가능

- 

날짜데이터 연산은 +, - 만 가능
+ 1               : 1일 추가
+ 1/24            : 1시간 추가
+ 1/24/60         : 1분 추가
+ 1/24/60/60      : 1초 추가
+ 1/24/60/60 * 10 : 10초 추가

날짜끼리 연산
1. 날짜 - 날짜 == 일단위 숫자로 나옴
    결과
    1 : 1일
    1.5 : 1일 12시간

[임시 테이블]
DUAL TABEL
DUAL(dummy tAbLe)
- 가짜테이블(임시테이블)
- 실존하는 테이블이 아님
- 테이블 데이터가 아닌 단순 데이터 조회 시 사용

[컬럼별 별칭 지정하기]
추출된 데이터 컬럼 한눈에 알아볼 수 있게 하기
    1. 컬럼명 AS 별칭   : 문자
    2. 컬럼명 AS "별칭" : 문자, 띄어쓰기포함 특수문자
    3. 컬럼명 별칭      : 문자
    4. 컬럼명 "별칭"    : 문자, 띄어쓰기포함 특수문자
++ "" : ""사이 글자를 그대로 인식함
++ '' : 문자열

++개발 언어별 "" 사용법

HTML, JS 	: STRING == ''
JAVJA    	: STRING != '' (CHAR)
DB(ORACLE) : "" 글자 그대로 인식. (TEXT)

[연결 연산자 ||]
- 오라클에서는 연산자를 기호로 안씀(단어 그대로 씀 AND, OR, NOT)
- ||는 문자열 이어쓰기(+로 연결 안됨!!)

SELECT EMP_ID || EMP_NAME 
FROM EMPLOYEE ;
--> 결과 : EMP_ID EMP_NAME 같이 나옴
           200선동일
           201송종기 ...

[컬럼명 자리에 리터럴 직접 작성]
SELECT EMP_NAME , SALARY, '원'
FROM EMPLOYEE ;
    결과 : 조회 결과(RESULT SET)의 모든 행에 
           컬럼명 자리에 작성한 리터럴 값이 추가된다!!

[DISTINCT]
조회 결고의 집합에서
지정된 컬럼의 값이 중복되는 경우 이를 한번만 표현
    사용처: 입력된 구분 값 종류 조회할 때
    SELECT DISTINCT DEPT_CODE 
    FROM EMPLOYEE;
    --> DEPT_CODE 종류별로 하나씩만 출력


/* ++ 절의 종류
 * 1. SELECT
 * 2. FROM + JOIN
 * 3. WHERE
 * 4. GROUP BY
 * 5. HAVING
 * 6. ORDER BY 
 * */

[WHERE 절]
테이블에서 조건을 충족하는 행 조회 시 사용
WHERE절에는 조건식(TRUE/FALSE)만 작성

비교연산자 : >,<,>=,<=, =, !=, <> (같지않다)
    특징 : 같지않다 뜻하는 연산자 2개(1=, <>)
           같다 뜻하는 연산자는 = 하나만 쓴다(==가 아니다!)

논리연산자 : AND OR NOT
    특징   : 문자 그대로 작성한다.

[SELECT 작성법2]

SELECT 컬럼1, 컬럼2, ...
FROM 테이블명
WHERE 조건식;

-> 지정된 테이블의 모든 행에서 컬럼명이 일치하는 컬럼 값 조회된

- 작동 방식 및 순서
1. FROM 절에 지정된 테이블에서
2. WHERE 절로 지정된 행을 추림
3. 추려진 행들을 SELECT 절로 조회된

[NULL 조회하기!!]
[빈칸 감지 함수]
NULL - ORACLE에서 NULL은 값이 아님.
저장된 값이 없음을 표현하는 의미
-> SELECT = NULL -> 값이 없는것이 아니라 
   값이 문자열 NULL 인 컬럼을 찾아오는 것으로 인식함!
-> 진짜 NULL(값이 없음)을 찾고 싶으면 빈칸을 감지하는 함수 사용
컬럼명 IS NULL : 컬럼 값이 존재하지 않다면 TRUE
컬럼명 IS NOT NULL : 컬럼 값이 존재한다면  FALSE

[논리연산 AND, OR]
다른 개발 언어의 AND 연산, OR 연산과 사용법 동일함
AND : 둘 다 참이어야 TRUE 반환 -> 및
OR : 둘 중 하나만 참이어도 TRUE 반환 -> 또는

[ BETWEEN ]
[1. BETWEEN A AND B]
- 컬럼의 값이 A 이상 B 이하면 TRUE
-> TEMP 값이 1000 이상, 2000 이하인 컬럼만 추리기
    WHERE TEMP >= 1000 AND TEMP <= 2000;
    WHTER TEMP BETWEEN 1000 AND 2000;

[2. NOT BETWEEN A AND B]
- 컬럼의 값이 A 이상 B 이하이면 FALSE
-> TEMP 값이 1000미만 또는 2000 초과인 컬럼 추리기
    WHERE TEMP < 1000 OR TEMP > 2000 
    WHERE TEMP NOT BETWEEN 1000 AND 2000

- BETWEEN 사용처
    게시판 하부의 페이지 조회
    특정한 범위 내의 값을 조회할 때 사용함

    + TO_DATE('날짜', '패턴') 이용하여
      날짜도 비교 가능함(날짜끼리)

[IN]
컬럼명 IN(값1, 값2, 값3, ...)
- 컬럼의 값이 ()안의 값과 일치하면 TRUE 반환

[NOT IN]
컬럼명 NOT IN(값1, 값2, 값3, ...)
- 컬럼의 값이 ()안의 값과 일치하면 FALSE 반환
    -> 컬럼의 값이 () 안의 값과 일치하지 않으면 FALSE

[LIKE]

비교하려는 값이 특정한 패턴을 만족시키면 TRUE 반환 연산자

- 작성법
WHERE 칼럼명 LIKE '패턴'

LIKE 패턴(와일드카드)의 종류
    1. '%' : 포함. 어떤 것이든 괜찮음. 없는 문자열도 포함시킴.
        '%A'  : A로 끝나는 문자열
        'A%'  : A로 시작되는 문자열
        '%A%' : 중간에 A가 포함된 문자열

    2. '_' : 글자 수
        'A_'  : A로 시작, 뒤에 아무거나 한 글자만 있는 문자열
        '__A' : A 앞에 아무거나 두 글자만 있는 문자열
    
 - 비교
 WHERE PHONE LIKE '010%'; -- %버전
 WHERE PHONE LIKE '010________'; -- _ 버전

 - 조합
 요구 : EMAIL의 아이디 (@ 앞의 글자)의 글자 수가 5글자인 사원조회
 WHERE EMAIL LIKE '_____@%'; -- _,와일드카드(%)같이 사용

- ESCAPE 문자
!!! : ESCAPE 문자는 임의로 지정 가능
요구 : 이메일의 아이디 중 '_' 앞 쪽 글자의 수가 3글자인 사원 조회
ESCAPE 안쓰면 구분 기준 _ 가 와일드카드로 인식됨
WHERE EMAIL LIKE '___._%' ESCAPE'.';
--> ESCAPE 문자는 아무거나 사용 가능. 지금은 .으로 사용



